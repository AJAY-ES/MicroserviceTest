

services:
  ## üíæ MySQL ###
  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: devdb
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - backend

  ### üçÉ MongoDB ###
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27018:27017" # fixed mapping (host:container)
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - backend

  elasticsearch:
    image: elasticsearch:8.17.1
    container_name: elasticsearch
    restart: always
    volumes:
      - elastic_data:/usr/share/elasticsearch/data/
    environment:
      - xpack.security.enabled=false  # Disable security for local development
      - ES_JAVA_OPTS=-Xmx256m -Xms256m
      - discovery.type=single-node
    ports:
      - '9200:9200'
    networks:
      - backend

  logstash:
    image: logstash:8.17.1
    container_name: logstash
    restart: always
    volumes:
      - ./logstash/:/logstash_dir
    command: logstash -f /logstash_dir/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    ports:
      - '5044:5044'
    environment:
      - LS_JAVA_OPTS=-Xmx256m -Xms256m
    networks:
      - backend

  kibana:
    image: kibana:8.17.1
    container_name: kibana
    restart: always
    ports:
      - '5601:5601'
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - backend
  ## üîç ZIPKIN ###
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9411/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  ### üìä PROMETHEUS ###
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend

  ### üìà GRAFANA ###
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - backend
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards

    depends_on:
      - prometheus
  ### ‚ö° REDIS ###
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  ### üì® KAFKA ###
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - backend

  ### üõ†Ô∏è ADMIN SERVER ###
  admin-server:
    build:
      context: ./Admin-Server
      dockerfile: Dockerfile
    container_name: admin-server
    ports:
      - "3333:3333"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=3333
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 20
      start_period: 120s
    networks:
      - backend

  ### üèóÔ∏è CONFIG SERVER ###
  config-server:
    build:
      context: ./Config-Server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=classpath:/config
    volumes:
      - ./Configuration-Properties:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    depends_on:
      admin-server:
        condition: service_healthy
    networks:
      - backend

  ### üåê SERVICE REGISTRY ###
  service-registry:
    build:
      context: ./Service-Registry
      dockerfile: Dockerfile
    container_name: service-registry
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 15
      start_period: 90s
    depends_on:
      config-server:
        condition: service_healthy
      admin-server:
        condition: service_healthy
    networks:
      - backend

  ### üîå API GATEWAY ###
  api-gateway:
    build:
      context: ./API-Gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 15
      start_period: 90s
    depends_on:
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
      admin-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    networks:
      - backend

  product:
    build:
      context: ./Product
      dockerfile: Dockerfile
    container_name: product
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_DATA_MONGODB_HOST=mongodb
      - SPRING_DATA_MONGODB_PORT=27017
      - SPRING_DATA_MONGODB_DATABASE=productsdb
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    depends_on:
      api-gateway:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      admin-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    networks:
      - backend
  user:
    build:
      context: ./User
      dockerfile: Dockerfile
    container_name: user
    ports:
      - "8086:8086"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    depends_on:
      api-gateway:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      admin-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    networks:
      - backend
  order:
    build:
      context: ./Order
      dockerfile: Dockerfile
    container_name: order
    ports:
      - "8087:8087"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8087/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    depends_on:
      api-gateway:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      admin-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    networks:
      - backend
  inventory:
    build:
      context: ./Inventory
      dockerfile: Dockerfile
    container_name: inventory
    ports:
      - "8088:8088"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8088/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    depends_on:
      api-gateway:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      admin-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    networks:
      - backend
  payment:
    build:
      context: ./Payment
      dockerfile: Dockerfile
    container_name: payment
    ports:
      - "8089:8089"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8089/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    depends_on:
      api-gateway:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      admin-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    networks:
      - backend
  notification:
    build:
      context: ./Notification
      dockerfile: Dockerfile
    container_name: notification
    ports:
      - "8090:8090"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8090/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    depends_on:
      api-gateway:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      admin-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    networks:
      - backend
  cart:
    build:
      context: ./Cart
      dockerfile: Dockerfile
    container_name: cart
    ports:
      - "8091:8091"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8091/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    depends_on:
      api-gateway:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      admin-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    networks:
      - backend
networks:
  backend:
    driver: bridge

volumes:
  elastic_data: {}
  mysql-data:
  mongo-data:
  kafka-data:

